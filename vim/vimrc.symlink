" use pathogen
call pathogen#infect()
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set nocompatible	" choose no compatibility with legacy vi
syntax enable		" syntax highlighting
set encoding=utf-8	" use unicode
set showcmd		" display incomplete commands

" recommended for powerline
set laststatus=2	" always show the statusline
let g:Powerline_symbols = 'fancy'

let mapleader = ","		" set comma to be the leader

" load file type plugins + indentation
if has("autocmd")
	filetype on
	filetype indent on
	filetype plugin on
endif

"" Whitespace
set nowrap		" don't wrap lines
set tabstop=4 shiftwidth=4	" a tab is four spaces
set backspace=indent,eol,start	"backspace through everything in insert mode

"" Searching
set hlsearch		" highlight matches
set incsearch		" incremental searching
set ignorecase		" searches are case insensitive
set smartcase		" ... unless they contain at least one capital letter

"" From Pretty Vim Color Schemes
"" http://kevin.colyar.net/2011/01/pretty-vim-color-schemes-in-iterm2/
set t_Co=256
let g:solarized_termcolors=256
if has('gui_running')
	set background=light
else
	set background=dark
endif
colorscheme solarized
" colorscheme grb4

" Relative Absolute Line Number Toggle
" https://gist.github.com/2947616
if exists("+relativenumber")
	set relativenumber  " show relative line numbers
	set numberwidth=3   " narrow number column
	" cycles between relative / absolute / no numbering
	function! RelativeNumberToggle()
		if (&relativenumber == 1)
			set number number?
		elseif (&number == 1)
			set nonumber number?
		else
			set relativenumber relativenumber?
		endif
	endfunc
	nnoremap <silent> <leader>n :call RelativeNumberToggle()<CR>
else					" fallback
	set number			" show line numbers
	" inverts numbering
	nnoremap <silent> <leader>n :set number! number?<CR>
endif

" Toggle wrapping text.
function! WrapTextToggle()
	if (&wrap == 1)
		set nowrap
	else
		set wrap linebreak textwidth=0
	endif
endfunc
nnoremap <silent> <leader>w :call WrapTextToggle()<CR>

" Toggle spell check.
function! SpellCheckToggle()
	if (&spell == 1)
		set nospell
	else
		set spell spelllang=en_us
	endif
endfunc
nnoremap <silent> <leader>s :call SpellCheckToggle()<CR>

:nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

" Dollar sign at the end of a change
" (See the vim tutorial).
" https://vimeo.com/album/2183821/video/6329762
set cpoptions+=$

" Commenting blocks of code
autocmd FileType c,cpp,java,scala,stata		let b:comment_leader = '// '
autocmd FileType sh,ruby,python				let b:comment_leader = '# '
autocmd FileType conf,fstab					let b:comment_leader = '# '
autocmd FileType tex						let b:comment_leader = '% '
autocmd FileType mail						let b:comment_leader = '> '
autocmd FileType vim						let b:comment_leader = '" '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>"

augroup json_autocmd
	autocmd!
	autocmd FileType json set autoindent
	autocmd FileType json set formatoptions=tcq2l
	autocmd FileType json set textwidth=78 shiftwidth=2
	autocmd FileType json set softtabstop=2 tabstop=8
	autocmd Filetype json set expandtab
	autocmd FileType json set foldmethod=syntax
augroup END

au BufNewFile,BufRead *.yaml,*.yml set et ts=2 sw=2

	
